QPOT: Quasi-POTential analysis for stochastic differential equations
========================================================
author: Christopher M. Moore
date: 17 August 2016
autosize: true

Cleveland R Users Group

Modeling nature
========================================================
*The physicist Heinz Pagels (1982) once observed that there seem to be two kinds of people in the world.*

1. **There are those who seek
and find deterministic order and meaning, if not purpose,
in every event.** 
2. **And then there are those who believe
events to be influenced, if not dominated, by intrinsically
inscrutable, and meaningless, random chance.**

*One of the intellectual triumphs of twentieth-century physics was to prove that both views of physical nature are simultaneously true and correct, but on very different spatial and temporal scales.*---S. Hubbell (2001), *The Unified Neutral Theory of Biodiversity and Biogeography* (Princeton, p. 7)

```{r, echo = F, fig.width = 6, fig.height = 4, out.width = "750px", out.height = "500px", fig.align = 'center', cache = T}
x <- sample(x = seq(from = 0, to = 2*pi, by = 0.01), size = 50)
y.pts <- sin(x)+rnorm(length(x),, 2) 
par(mar = rep(0.1, 4), oma = rep(0.1, 4))
plot(x, y.pts, type = "n", ann = F, xaxt = "n", yaxt = "n")
polygon(c(-10, -10, 10, 10), c(-10, 10, 10, -10), col = rgb(0.1,0.5,0.9,0.05,,1), border = F)
points(x, y.pts, pch = 21, bg = NA, cex = 2.5, col = "grey30")
points(x, y.pts, pch = 21, bg = "#25679E88", cex = 2.5, col = NA)
```



Ecology: a science of dynamics and complexity
========================================================
**The study of the spatial and temporal patterns of the distributions and abundances of organisms, including causes and consequences**

Ecology is hierarchically organized:
  - Individuals
  - Populations
  - Communities
  - Ecosystems

Today's focus, *population ecology*, is strongly quantitative and mathematical

Some R notes, pt. I
========================================================
- Packages I'll be using if you want to follow along
```{r}
  library(package = "deSolve") # Solver for differential equations
  library(package = "rootSolve") # Finds roots, Jacobian matrices, and estimates steady-state conditions
  library(package = "phaseR") # Tools for graphing 
  library(package = "MASS") # For 2-D density estimator
  library(package = "QPot") # Our package!
  library(package = "viridis") # Great color map
```
- For this presentation, I opened RStudio for the second time, and updated from v. 0.98.447 (current is v. 0.99.902)

### Based primarily on two works
  1. Nolting and Abbott's *Ecology* paper
    - B. C. Nolting and K. C. Abbott. Balls, cups, and quasi-potentials: Quantifying stability in stochastic systems. Ecology, 97(4):850â€“864, 2016. [Link](http://onlinelibrary.wiley.com/doi/10.1890/15-1047.1/abstract)
  2. Our R package and paper
    - C.M. Moore, C.R. Stieha, B.C. Nolting, M.K. Cameron, and K.C. Abbott. QPot: Quasi-Potential Analysis for Stochastic Differential Equations, 2016. URL [https://www.R-project.org/package=QPot](https://www.R-project.org/package=QPot). R package version 1.2.
    - Moore, C.M., Stieha, C.R., Nolting, B.C., Cameron, M.K. and Abbott, K.C. 2015. QPot: An R Package for Stochastic Differential Equation Quasi-Potential Analysis. [arXiv preprint arXiv:1510.07992](http://arxiv.org/abs/1510.07992).

Differential equations: as models
========================================================
$$\frac{\text{change in a variable}}{\text{change in another variable}}$$

if $~x$ is a variable that is dependent on variable $~y$, then we can write

$$\frac{d x}{d y}$$

with time, $~t$, as the independent variable

$$\frac{d x}{d t}$$

Differential equations: some examples, pt. I
========================================================
Growth of $~x$ at a rate, $~\alpha$
$$\frac{dx}{dt} = \alpha x $$

Logistic equation, with growth of $~x$ at a rate $~\alpha$, and negative density-dependent growth (crowding effect) of strength $\gamma$ and interaction between $x \times x$:

$$\frac{dx}{dt} = \alpha x - \gamma x^2$$


Differential equations: some examples, pt. II
========================================================
Competition between species $~N_1$ and $~N_2$

$$
  \frac{dN_1}{dt} = r_1N_1 - \alpha_{11} N_1N_1  - \beta_{21} N_2N_1 \\
  \frac{dN_2}{dt} = r_2N_2 - \alpha_{22} N_2N_2  - \beta_{12} N_1N_2
$$

Disease model of susceptible, $~S$, infected $~I$, and recovered, $~R$

$$
\begin{aligned}
  \frac{dS}{dt} &= \alpha S - \beta SI + \delta R - d_SS \\
  \frac{dI}{dt} &= \beta SI -\gamma I - d_II \\
  \frac{dR}{dt} &= \gamma I -\delta R - d_RR
\end{aligned}
$$


Differential equations in R: deSolve format, pt. I
========================================================
`deSolve` has set the standard, with:

- Function arguments
  - time
  - initial conditions as a named vector, `y0`, for each of the variables
  - parameters as a named vector
- Returns a list of variable values

Differential equations in R: deSolve format, pt. II
========================================================
*The mathematics of uncontrolled growth are frigtening.*  **A single cell** *of the bacterium E. coli would, under ideal circumstances,* **divide every twenty minutes**.  *That is not particularly disturbing until you think about it, but the fact is that bacteria multiply geometrically: one becomes two, two become four, four become eight, and so on.  In this way,* **it can be shown that in a single day, one cell of E. coli could producece a super-colony equal in size and weight to the entire planet earth.**---Michael Crichton (1969), *The Andromeda Strain* (Dell, New York, p. 247)

$$\frac{dx}{dt} = \alpha x = 2x$$

Differential equations in R: deSolve format, pt. III
========================================================
$$\frac{dx}{dt} = \alpha x = 2x$$
```{r}
growth <- function(t, y0, parameters){
  with(as.list(c(y0, parameters)), {
    dx = alpha*x
    list(c(dx))
  })
}
```

```{r echo = T}
growth(y0 = c(x = 1), parameters = c(alpha = 2))
```

Differential equations in R: deSolve::ode
========================================================
$$\frac{dx}{dt} = \alpha x = 2x$$

```{r, echo = T}
start <- c(x = 1)
parameters <- c(alpha = 2)
hours <- seq(from = 0, to = 24, by = (1/3))

out <- ode(y = start, times = hours, func = growth, parms = parameters)
out[1:3,]
```

Differential equations in R: plot deSolve::ode
========================================================
&nbsp;

$$\frac{dx}{dt} = \alpha x = 2x$$

```{r echo = 3, fig.width=4, fig.height=4, out.width="480px", out.height="480px", dpi=300, cache = T}
out[nrow(out),]
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
plot(out[,1], out[,2], xlab = "Time", ylab = "x", type = "l", lwd = 2)
```

***
&nbsp;  
&nbsp;  
&nbsp;  

### Was Michael Crichton correct?
```{r, echo = F}
e.coli.cell <- 1*10^-12
total.mass <- e.coli.cell*out[nrow(out),2]
earth.mass <- 5.972*10^27
paste0("Mass of an E. coli cell = ", format(e.coli.cell, digits = 2, scientific = T), " (g)")
paste0("times ", format(out[nrow(out),2], digits = 2, scientific = T), " = ", format(total.mass, digits = 2, scientific = T), " (g)")
paste0("The mass of Earth is = ", format(earth.mass, digits = 2, scientific = T), " (g)")
if (total.mass > earth.mass) {paste0("MC was correct about mass")} else {paste0("MC was incorrect about mass")}

e.coli.cell.v <- 1*10-18
total.v <- e.coli.cell*out[nrow(out),2]
earth.v <- 1097509500000000000000
paste0("Volume of an E. coli cell = ", format(e.coli.cell.v, digits = 2, scientific = T), " (mm^3)")
paste0("times ", format(out[nrow(out),2], digits = 2, scientific = T), " = ", format(total.v, digits = 2, scientific = T), " (mm^3)")
paste0("The volume of Earth is = ", format(earth.v, digits = 2, scientific = T), " (g)")
if (total.v > earth.v) {paste0("MC was correct about volume")} else {paste0("MC was incorrect about volume")}

```

Differential equations in R: 2-D competition
========================================================
Competition between species $~N_1$ and $~N_2$

$$\frac{dN_1}{dt} = r_1N_1 - \alpha_{11} N_1N_1  - \beta_{21} N_2N_1 \\
\frac{dN_2}{dt} = r_2N_2 - \alpha_{22} N_2N_2  - \beta_{12} N_1N_2$$

- $r_i$, the population growth rate of species $i$
- $\alpha_{ii}$, competition between the same species $i$
- $\beta_{ji}$, the competitive effect of species $j$ on species $i$

Differential equations in R: competition in ode
========================================================
```{r}
comp <- function(t, y0, parameters){
  with(as.list(c(y0, parameters)), {
  dx <- r1*x - a11*x*x - b21*y*x
  dy <- r2*y - a22*y*y - b12*x*y
  list(c(dx, dy))
  })
}
state <- c(x = 1, y = 4)
parameters <- c(r1 = 1, r2 = 1, a11 = 0.1, a22 = 0.1, b12 = 0.05, b21 = 0.05)
time <- seq(from = 0, to = 25, length.out = 100)
out <- ode(y = state, times = time, func = comp, parms = parameters)
```

Differential equations in R: competition over time
========================================================
```{r echo=2:3, fig.width=6, fig.height=4, out.width="1000px", out.height="666px", dpi=300}
par(mar = c(4, 6, 1, 1))
plot(out[,1], out[,2], type = "l", col = "red", xlab = "Time", ylab = "Density of\nspecies 1 (red) and species 2 (blue)", ylim = c(0, max(out[,c(2,3)], na.rm = T)), lwd = 2)
lines(out[,1], out[,3], col = "blue", lwd = 2)
```

Differential equations in R: competition in phase space
========================================================
```{r echo=2:3, fig.width=4, fig.height=4, out.width="600px", out.height="600px", dpi=300, cache=T}
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
plot(out[,2], out[,3], xlab = "Density of species 1", ylab = "Density of species 2", type = "l", lwd = 2, xlim = c(0, 10), ylim = c(0, 10))
points(out[1, 2], out[1, 3], pch = 16)
```

Differential equations in R: competition trajectories
========================================================
```{r echo=-1, fig.width=4, fig.height=4, out.width="600px", out.height="600px", dpi=300, cache=TRUE}
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
plot(out[,2], out[,3], xlab = "Density of species 1", ylab = "Density of species 2", type = "l", lwd = 3, xlim = c(0, 10), ylim = c(0, 10))
for (i in 1:25){
  state <- c(x = runif(n = 1, min = 0, max = 10), y = runif(n = 1, min = 0, max = 10))
  out <- ode(y = state, times = time, func = comp, parms = parameters)
  lines(out[,2], out[,3], lwd = 2)
  points(out[1, 2], out[1, 3], pch = 16)
}
```

Differential equations in R: phaseR::flowField format
========================================================
```{r}
comp <- function(t, y0, parameters){
  with(as.list(c(y0, parameters)), {
  x <- y0[1]
  y <- y0[2]
  dx <- r1*x - a11*x*x - b21*y*x
  dy <- r2*y - a22*y*y - b12*x*y
  list(c(dx, dy))
  })
}
```

Differential equations in R: phaseR::flowField plot
========================================================
```{r echo=-1, fig.width=5, fig.height=5, out.width="800px", out.height="800px", dpi=300, cache=TRUE}
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
ff <- flowField(deriv = comp, x.lim = c(0, 10), y.lim = c(0, 10), parameters = parameters, points = 20, add = F, col = "black", arrow.type = "equal")
```
```{r echo=F, fig.width=5, fig.height=5, out.width="800px", out.height="800px", dpi=300, cache=TRUE}
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
ff <- flowField(deriv = comp, x.lim = c(0, 10), y.lim = c(0, 10), parameters = parameters, points = 20, add = F, col = "black", arrow.type = "proportional", frac = 2)
```

Differential equations in R: phaseR::flowField trajectories
========================================================
```{r echo=-1, fig.width=4, fig.height=4, out.width="600px", out.height="600px", dpi=300, cache=TRUE}
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
ff <- flowField(deriv = comp, x.lim = c(0, 10), y.lim = c(0, 10), parameters = parameters, points = 20, add = F, col = "grey50")
for (i in 1:25){
  xy.start <- c(runif(n = 1, min = 0, max = 10), runif(n = 1, min = 0, max = 10))
  traj <- trajectory(deriv = comp, y0 = xy.start, parameters = parameters, col = "black", t.end = 10, pch = 16, lwd = 2)
}
```

Differential equations in R: competitive exclusion
========================================================
```{r CE, echo=-2, include = T,  fig.width=4, fig.height=4, out.width="600px", out.height="600px", dpi=300, cache=TRUE}
parameters.ce <- c(r1 = 1, r2 = 1, a11 = 0.1, a22 = 0.1, b21 = 0.25, b12 = 0.25)
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
ff <- flowField(deriv = comp, x.lim = c(0, 10), y.lim = c(0, 10), parameters = parameters.ce, points = 20, add = F, col = "grey50")
abline(h = 0, v = 0)
for (i in 1:15){
  xy.start <- c(runif(n = 1, min = 0, max = 10), runif(n = 1, min = 0, max = 10))
  traj <- trajectory(deriv = comp, y0 = xy.start, parameters = parameters.ce, col = "black", t.end = 25, lwd = 2, pch = 16)
}
```


Differential equations in R: cyclic behaviors
========================================================
```{r, echo = F}
prey.predator <- function(t, y0, parameters){
  with(as.list(c(y0, parameters)), {
  x <- y0[1]
  y <- y0[2]
  dx <- b*x - c*x*y
  dy <- d*x*y - e*y
  list(c(dx, dy))
  })
}
parameters <- c(b = 1, c = 1, d = 1, e = 1)
```
$$\frac{dR}{dt} = bR - cRC \\
\frac{dC}{dt} = dRC - eC$$
```{r echo=-1, fig.width=5, fig.height=5, out.width="600px", out.height="600px", dpi=300, cache=TRUE}
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
ff <- flowField(deriv = prey.predator, x.lim = c(0, 3), y.lim = c(0, 3), parameters = parameters, points = 20, add = F, col = "black", xlab = "R", ylab = "C")
```
```{r echo = F, fig.width=5, fig.height=5, out.width="600px", out.height="600px", dpi=300, cache=TRUE}
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
ff <- flowField(deriv = prey.predator, x.lim = c(0, 3), y.lim = c(0, 3), parameters = parameters, points = 20, add = F, col = "grey50", xlab = "R", ylab = "C")
for (i in 1:10)
  {
    xy.start <- c(runif(n = 1, min = 0, max = 3), runif(n = 1, min = 0, max = 3))
  traj <- trajectory(deriv = prey.predator, y0 = xy.start, parameters = parameters, points = 20, col = rainbow(10)[i], t.end = 20, pch = 16, lwd = 2)
}
out <- ode(y = xy.start, times = seq(0, 20, 0.1), func = prey.predator, parms = parameters)
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
plot(out[,1], out[,2], type = "l", col = "red", lwd = 2, ylab = "Time", xlab = "Density")
lines(out[,1], out[,3], col = "blue", lwd = 2)
```

Differential equations in R: unstable behaviors, pt. I
========================================================
```{r, echo = F}
mut <- function(t, y0, parameters){
  with(as.list(c(y0, parameters)), {
  x <- y0[1]
  y <- y0[2]
  dx <- a*x - b*x*x + c*x*y
  dy <- a*y - b*y*y + c*y*x
  list(c(dx, dy))
  })
}
parameters <- c(a = 2, b = 2, c = 0.5)
```
$$\frac{dN_1}{dt} = r_1N_1 - \alpha _{11}N_1^2 + \beta _{21}N_2N_1 \\
\frac{dN_2}{dt} = r_2N_2 - \alpha _{22}N_2^2 + \beta _{12}N_1N_2$$
```{r echo=-1, fig.width=4, fig.height=4, out.width="600px", out.height="600px", dpi=300, cache=TRUE}
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
ff <- flowField(deriv = mut, x.lim = c(0, 2), y.lim = c(0, 2), parameters = parameters, points = 20, add = F, col = "black")
nc <- nullclines(deriv = mut, x.lim = c(0, 2), y.lim = c(0, 2), parameters = parameters, lwd = 2)
```
```{r echo = F, fig.width=4, fig.height=4, out.width="600px", out.height="600px", dpi=300, cache=TRUE}
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
ff <- flowField(deriv = mut, x.lim = c(0, 2), y.lim = c(0, 2), parameters = parameters, points = 20, add = F, col = "grey50")
    nc <- nullclines(deriv = mut, x.lim = c(0, 2), y.lim = c(0, 2), parameters = parameters, lwd = 2)
for (i in 1:25)
  {
    xy.start <- c(runif(n = 1, min = 0, max = 2), runif(n = 1, min = 0, max = 2))
    traj <- trajectory(deriv = mut, y0 = xy.start, parameters = parameters, points = 20, col = "black", t.end = 20, pch = 16, lwd = 2)
}
```

Differential equations in R: unstable behaviors, pt. II
========================================================
```{r, echo = F}
parameters <- c(a = 2, b = 2, c = 2)
```
$$\frac{dN_1}{dt} = r_1N_1 - \alpha _{11}N_1^2 + \beta _{21}N_2N_1 \\
\frac{dN_2}{dt} = r_2N_2 - \alpha _{22}N_2^2 + \beta _{12}N_1N_2$$
```{r echo=-1, fig.width=4, fig.height=4, out.width="600px", out.height="600px", dpi=300, cache=TRUE}
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
ff <- flowField(deriv = mut, x.lim = c(0, 2), y.lim = c(0, 2), parameters = parameters, points = 20, add = F, col = "black")
nc <- nullclines(deriv = mut, x.lim = c(0, 2), y.lim = c(0, 2), parameters = parameters, lwd = 2)
```
```{r echo = F, fig.width=5, fig.height=5, out.width="600px", out.height="600px", dpi=300, cache=TRUE}
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
ff <- flowField(deriv = mut, x.lim = c(0, 2), y.lim = c(0, 2), parameters = parameters, points = 20, add = F, col = "grey50")
    nc <- nullclines(deriv = mut, x.lim = c(0, 2), y.lim = c(0, 2), parameters = parameters, lwd = 2)
for (i in 1:25)
  {
    xy.start <- c(runif(n = 1, min = 0, max = 2), runif(n = 1, min = 0, max = 2))
    traj <- trajectory(deriv = mut, y0 = xy.start, parameters = parameters, points = 20, col = "black", t.end = 20, pch = 16, lwd = 2)
}
```

Stochasticity: its role in ecology and stability
========================================================
- Model unexplained variation in a variable
- Ecology, like other complex systems, is riddled with a multiplicity of processes ignored by simple, deterministic models
- Consequently, we can model unexplained variation
- [CRAN Task View: Differential Equations](https://cran.r-project.org/web/views/DifferentialEquations.html)

QPOT: stochastic differential equation and a realization
========================================================
$$dN_1 = \left(r_1N_1 - \alpha_{11} N_1N_1  - \beta_{21} N_2N_1\right)dt + \sigma_1 dW_1\\
dN_2 = \left(r_2N_2 - \alpha_{22} N_2N_2  - \beta_{12} N_1N_2\right)dt + \sigma_2 dW_2$$

```{r, cache=TRUE}
parameters <- c(r1 = 1, r2 = 1, a11 = 0.1, a22 = 0.1, b12 = 0.05, b21 = 0.05)
model.deltat <- 0.1
ms <- Model2String(model = comp, parms = parameters, deSolve.form = T, supress.print = T)
ts <- TSTraj(y0 = c(x = 1, y = 1), time = 100, deltat = model.deltat, x.rhs = ms[1], y.rhs = ms[2], sigma = 1, lower.bound = 0)
```

QPOT: stochastic simulations, time series
========================================================

```{r fig.width=8, fig.height=4, dpi=300, out.width="1500px", out.height="750px", cache=TRUE}
TSPlot(mat = ts, deltat = model.deltat)
```

QPOT: stochastic simulations, realization and density
========================================================
```{r eval=F}
TSPlot(ts, deltat = model.deltat, dim = 2)
TSDensity(mat = ts, deltat = model.deltat, dim = 2, col2d = viridis(100, option = "A"))
```

```{r echo=F, fig.width=4, fig.height=4, out.width="800px", out.height="800px", dpi=300, cache=TRUE}
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
TSPlot(mat = ts, deltat = model.deltat, dim = 2, line.alpha = 175, las = 0)
TSDensity(mat = ts, deltat = model.deltat, dim = 2, col2d = viridis(100, option = "A"))
```

QPOT: what is the quasi-potential
========================================================
The potential relates to the work needed to move from one point to another, with the areas of least potential at surface minima.

```{r echo = F, fig.width=6, fig.height=3.75, out.width="800px", out.height="500px", cache=TRUE}
  par(mar = rep(0.1, 4), oma = rep(0, 4))
  plot(0, type = "n", xlim = c(0, 2*pi), ylim= c(-1.25, 1.4), xaxt = "n", yaxt = "n", ann = F)
  x <- seq(from = -pi, to = 3*pi, by = 0.01)
  lines(x, cos(x), lwd = 2)
  points(pi, -0.9, cex = 3, pch = 16)
  points(2*pi, 1.1, cex = 3, pch = 16)
  x.c <- seq(from = pi-0.25, to = pi+0.25, by = 0.01)
  lines(x.c, cos(x.c)-0.15, lwd = 3, col = "red",)
  arrows(pi+0.25, -0.9, pi+0.25, 1.1, code = 3, angle = 90, lwd = 3, col = "blue", length = 0.05)
  arrows(0, 1+0.3, 2*pi, 1+0.3, col = "orange", lwd = 3, code = 3, angle = 90, length = 0.05)
```

**The quasi-potential is a tool that yields information about properties of stochastic systems, such as the expected time to escape a basin of attraction, the expected frequency of transitions between basins, and the stationary probability distribution.**


QPOT: how is the quasi-potential calculated
========================================================
### Ordered Upwind Method
**Calucualtes the minimal cost path on a surface**

Sources for more information

1. Cameron, M.K. (2012). Finding the quasipotential for nongradient SDEâ€™s. *Physica D* 241, 1532-1550.
2. Sethian, J.A. and Vladimirsky, A. (2003). Ordered upwind methods for static Hamiltonâ€“Jacobi equations: Theory and algorithms. *SIAM Journal on Numerical Analysis* 41(1), 325-363.
3. Sethian, J.A. and Vladimirsky, A. (2001). Ordered upwind methods for static Hamiltonâ€“Jacobi equations. *PNAS* 98(20), 11069-11074.


QPOT: competition example, revisited
========================================================
<img src="QPot-figure/CE-1.png" width="800px" height="800px" />


QPOT: competition example, with stochasticity
========================================================
```{r echo = F, fig.width=4, fig.height=4, out.width="500px", out.height="500px", dpi=300, cache=TRUE}
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
model.deltat <- 0.1
ms <- Model2String(model = comp, parms = parameters.ce, deSolve.form = T, supress.print = T)
for (i in 1:8){
ts <- TSTraj(y0 = c(x = runif(1, 2, 4), y = runif(1, 2, 4)), time = 100, deltat = model.deltat, x.rhs = ms[1], y.rhs = ms[2], sigma = 1.5, lower.bound = 0)
TSPlot(mat = ts, deltat = model.deltat, dim = 2, line.alpha = 175, las = 0, xlim = c(0, 10), ylim = c(0, 10))
arrows(0,0,10,10, col = "#FF000077", lwd = 2, lty = "F4")
}
```


QPOT: competition example, finding stable equilibrium points
========================================================
## Analytically
 $$
 \begin{aligned}
  \frac{dN_1}{dt} &= r_1N_1 - \alpha_{11} N_1N_1  - \beta_{21} N_2N_1 \\
  0 &= r_1N_1 - \alpha_{11} N_1N_1  - \beta_{21} N_2N_1 \\
  0 &= N_1\left(r_1 - \alpha_{11} N_1  - \beta_{21} N_2\right) \\
  0 &= r_1 - \alpha_{11} N_1  - \beta_{21} N_2 \\
  \alpha_{11} N_1 &= r_1 - \beta_{21} N_2 \\
  N_1^* &= \frac{r_1 - \beta_{21} N_2}{\alpha_{11}}
  \end{aligned}
$$

## Numerically
- deSolve::ode
- rootSolve::steady

QPOT: competition example, local quasi-potential
========================================================
```{r eval = F}
ce <- Model2String(model = comp, parms = parameters.ce, deSolve.form = T)
bnd.x <- c(-5, 15); bnd.y <- c(-5, 15)
local.1 <- QPotential(x.rhs = ce[1], x.start = 0, x.bound = bnd.x, x.num.steps = 2000, y.rhs = ce[2], y.start = 10, y.bound = c(-5, 15), y.num.steps = 2000)
QPContour(surface = local.1, dens = c(500, 500), x.bound = bnd.x, y.bound = bnd.y)
```

```{r results = 'hide', echo = F, cache=TRUE}
ce <- Model2String(model = comp, parms = parameters.ce, deSolve.form = T)
bnd.x <- c(-5, 15); bnd.y <- c(-5, 15)
local.1 <- QPotential(x.rhs = ce[1], x.start = 0, x.bound = bnd.x, x.num.steps = 2000, y.rhs = ce[2], y.start = 10, y.bound = bnd.y, y.num.steps = 2000, verboseR = F, verboseC = F)
local.2 <- QPotential(x.rhs = ce[1], x.start = 10, x.bound = bnd.x, x.num.steps = 2000, y.rhs = ce[2], y.start = 0, y.bound = bnd.y, y.num.steps = 2000, verboseR = F, verboseC = F)
```

```{r echo = F, fig.width=4, fig.height=4, out.width="600px", out.height="600px", dpi=300, cache=TRUE}
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
QPContour(surface = local.1, dens = c(500, 500), x.bound = bnd.x, y.bound = c(-1, 15))
QPContour(surface = local.2, dens = c(500, 500), x.bound = bnd.y, y.bound = c(-1, 15))
```

QPOT: competition example, global quasi-potentials
========================================================
```{r, echo=-2}
saddle <- steady(y = c(3,3), func = comp, parms = parameters.ce)
saddle$y
```

```{r echo = -c(2, 3, 5), fig.width=4, fig.height=4, out.width="800px", out.height="800px", dpi=300, cache=TRUE}
global.qp <- QPGlobal(local.surfaces = list(local.1, local.2), unstable.eq.x = c(saddle$y[1]), unstable.eq.y = c(saddle$y[2]), x.bound = bnd.x, y.bound = bnd.y)
global.qp[is.na(global.qp) == T] <- max(global.qp, na.rm = T)
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
QPContour(surface = global.qp, dens = c(1000, 1000), x.bound = bnd.x, y.bound = bnd.y, xlim = c(-1, 11), ylim = c(-1, 11))
abline(v = 0, h = 0, lwd = 2, lty = "FA", col = "red")
```

QPOT: direction, gradient, and remainder fields
========================================================

```{r eval = F}
VD <- VecDecomAll(surface = global.qp, x.rhs = ce[1], y.rhs = ce[2], x.bound = bnd.x, y.bound = bnd.y)
VecDecomPlot(x.field = VD[,,1], y.field = VD[,,2], dens = c(20, 20), x.bound = bnd.x, y.bound = bnd.y)
VecDecomPlot(x.field = VD[,,3], y.field = VD[,,4], dens = c(20, 20), x.bound = bnd.x, y.bound = bnd.y)
VecDecomPlot(x.field = VD[,,5], y.field = VD[,,6], dens = c(20, 20), x.bound = bnd.x, y.bound = bnd.y)
```

```{r echo = F, fig.width = 4, fig.height = 4, dpi = 300, out.width = "650px", out.height = "650px", cache = T}
VDA <- VecDecomAll(surface = global.qp, x.rhs = ce[1], y.rhs = ce[2], x.bound = bnd.x, y.bound = bnd.y)
par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
VecDecomPlot(x.field = VDA[,,1], y.field = VDA[,,2], dens = c(20,20), x.bound = bnd.x, y.bound = bnd.y, tail.length = 0.5, head.length = 0.025, xlim = c(0, 11), ylim = c(0, 11), arrow.type = "equal")
VecDecomPlot(x.field = VDA[,,3], y.field = VDA[,,4], dens = c(20,20), x.bound = bnd.x, y.bound = bnd.y, tail.length = 0.5, head.length = 0.025, xlim = c(0, 11), ylim = c(0, 11), arrow.type = "equal")
VecDecomPlot(x.field = VDA[,,5], y.field = VDA[,,6], dens = c(20,20), x.bound = bnd.x, y.bound = bnd.y, tail.length = 0.5, head.length = 0.025, xlim = c(0, 11), ylim = c(0, 11), arrow.type = "equal")
```

QPOT: a disagreement in stability
========================================================
 $$
 \begin{aligned}
  \frac{dx(t)}{dt} &= \alpha x(t)\left(1 - \frac{x(t)}{\beta}\right) - \frac{\delta x^2(t)y(t)}{\kappa + x^2(t)} \\
  \frac{dy(t)}{dt} &= \frac{\gamma x^2(t)y(t)}{\kappa + x^2(t)} - \mu y^2(t)
  \end{aligned}
$$
```{r results = 'hide', echo = F, cache=TRUE}
	model.parms <- c(alpha = 1.54, beta = 10.14, delta = 1, gamma = 0.476, kappa = 1, mu = 0.112509)
  stab.points <- matrix(data = c(1.4049, 2.8081, 4.9040, 4.0619), ncol = 2, byrow = T)
  unstab.points <- matrix(data = c(0.0, 0.0, 4.2008, 4.0039), ncol = 2, byrow = T)
	eq1.x <- stab.points[1, 1]
	eq1.y <- stab.points[1, 2] # stable focus
	eq2.x <- stab.points[2, 1]
	eq2.y <- stab.points[2, 2] # stable node
	bounds.x <- c(-0.5, 20.0)
	bounds.y <- c(-0.5, 20.0)
	step.number.x <- 1000
	step.number.y <- 1000
	var.eqn.x <- "(alpha * x) * (1 - (x / beta)) - ((delta * (x^2) * y) / (kappa + (x^2)))"
	var.eqn.y <- "((gamma * (x^2) * y) / (kappa + (x^2))) - mu * (y^2)"
	parms.eqn.x <- Model2String(model = var.eqn.x, parms = model.parms, supress.print = T)
	parms.eqn.y <- Model2String(model = var.eqn.y, parms = model.parms, supress.print = T)
	eq1.local <- QPotential(x.rhs = parms.eqn.x, x.start = eq1.x, x.bound = bounds.x, x.num.steps = step.number.x, y.rhs = parms.eqn.y, y.start = eq1.y,  y.bound = bounds.y, y.num.steps = step.number.y)
	eq2.local <- QPotential(x.rhs = parms.eqn.x, x.start = eq2.x, x.bound = bounds.x, x.num.steps = step.number.x, y.rhs = parms.eqn.y, y.start = eq2.y, y.bound = bounds.y, y.num.steps = step.number.y)

	unstable.x <- c(unstab.points[1, 1], unstab.points[2, 1])
	unstable.y <- c(unstab.points[1, 2], unstab.points[2, 2])
	ex1.global <- QPGlobal(local.surfaces = list(eq1.local, eq2.local), unstable.eq.x = unstable.x, unstable.eq.y = unstable.y, x.bound = bounds.x, y.bound = bounds.y)
	ex1.global[is.na(ex1.global) == T] <- max(ex1.global, na.rm = T)
```
```{r, echo = F, fig.width=4, fig.height=4, out.width="700px", out.height="700px", dpi=300, cache=TRUE}
	model.ex1 <- function(t, y, parameters) {
		x <- y[1]
		y <- y[2]
		alpha <- parameters["alpha"]
		beta <- parameters["beta"]
		delta <- parameters["delta"]
		kappa <- parameters["kappa"]
		gamma <- parameters["gamma"]
		mu <- parameters["mu"]
		dy <- numeric(2)
		dy[1] <- (alpha*x)*(1-(x/beta)) - ((delta*(x^2)*y)/(kappa + (x^2)))
		dy[2] <- ((gamma*(x^2)*y)/(kappa + (x^2))) - mu*(y^2)
		list(dy)
}
	xlims <- c(0, 6)
	ylims <- c(0, 6)
	par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
	ff <- flowField(deriv = model.ex1, x.lim = xlims, y.lim = ylims, parameters = model.parms, points = 25, add = F, colour = "grey49")
	nc <- nullclines(model.ex1, x.lim = xlims, y.lim = ylims, parameters = model.parms, points = 250, col = c("blue","red"))

  for (i in 1:nrow(stab.points)){
    points(x = stab.points[i, 1], y = stab.points[i, 2], cex = 2, col = "black", bg = "grey40", pch = 21)
  }
  for (i in 1:nrow(unstab.points)){
    points(x = unstab.points[i, 1], y = unstab.points[i, 2], cex = 2, col = "black", bg = "grey95", pch = 21)
  }
```
```{r echo = F, fig.width=6, fig.height=3.75, out.width="500px", out.height="313px", cache=TRUE}
  par(mar = rep(0.1, 4), oma = rep(0, 4))
  plot(0, type = "n", xlim = c(0, 2*pi), ylim= c(-1.25, 1.4), xaxt = "n", yaxt = "n", ann = F)
  x <- seq(from = -pi, to = 3*pi, by = 0.01)
  lines(x, cos(x), lwd = 2)
  points(pi, -0.9, cex = 3, pch = 16)
  points(2*pi, 1.1, cex = 3, pch = 16)
  x.c <- seq(from = pi-0.25, to = pi+0.25, by = 0.01)
  lines(x.c, cos(x.c)-0.15, lwd = 3, col = "red",)
  arrows(pi+0.25, -0.9, pi+0.25, 1.1, code = 3, angle = 90, lwd = 3, col = "blue", length = 0.05)
  arrows(0, 1+0.3, 2*pi, 1+0.3, col = "orange", lwd = 3, code = 3, angle = 90, length = 0.05)
```
```{r echo = F, fig.width=4, fig.height=4, out.width="700px", out.height="700px", dpi=300}
	par(mar=c(4, 4, 0, 0), oma = c(0, 0, 1, 1))
  QPContour(surface = ex1.global, dens = c(1000, 1000), x.bound = bounds.x, y.bound = bounds.y, c.parm = 5, xlim = xlims, ylim = ylims, col.contour = rev(magma(100)))
```

Closing remarks
========================================================


Thank you
========================================================
- Website: [mutualismecology.com](mutualismecology.com)
- Email: [life.dispersing@gmail.com](life.dispersing@gmail.com)
- Twitter: [@lifedispersing](https://twitter.com/lifedispersing)